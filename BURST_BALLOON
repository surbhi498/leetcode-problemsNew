312. Burst Balloons
Hard
8K
205
company
Amazon
company
Google
company
Uber
You are given n balloons, indexed from 0 to n - 1. Each balloon is painted with a number on it represented by an array nums. You are asked to burst all the balloons.

If you burst the ith balloon, you will get nums[i - 1] * nums[i] * nums[i + 1] coins. If i - 1 or i + 1 goes out of bounds of the array, then treat it as if there is a balloon with a 1 painted on it.

Return the maximum coins you can collect by bursting the balloons wisely.

 

Example 1:

Input: nums = [3,1,5,8]
Output: 167
Explanation:
nums = [3,1,5,8] --> [3,5,8] --> [3,8] --> [8] --> []
coins =  3*1*5    +   3*5*8   +  1*3*8  + 1*8*1 = 167
Example 2:

Input: nums = [1,5]
Output: 10
 

Constraints:

n == nums.length
1 <= n <= 300
0 <= nums[i] <= 100
//Recursive Solution but not getting correct answers with it:
class Solution
{
    public:
        int maxCoins(vector<int> &nums)
        {
            int n = nums.size();
            vector<int> balloons(nums.size(), 0);
            if (n == 0) return 0;
            if (n == 1) return nums[0];
            for (int i = 0; i < nums.size(); i++)
            {
                if (i == 0)
                {
                    balloons[i] = nums[i] *nums[i + 1];
                }
                else if (i == (nums.size() - 1))
                {
                    balloons[i] = nums[i] *nums[i - 1];
                }
            }
            int maxcoins = INT_MIN;
            for (int i = 0; i < nums.size(); i++)
            {
                int leftcoins1 = 0;
                int rightcoins1 = 0;
                if (i > 0)
                {
                    vector<int> leftcoins(nums.begin(), nums.begin()+i-1);
                    leftcoins1 = maxCoins(leftcoins);
                }
                if (i < (nums.size() - 1))
                {
                    vector<int> rightcoins(nums.begin() + i + 1, nums.end());
                    rightcoins1 = maxCoins(rightcoins);
                }
                maxcoins = max(maxcoins, leftcoins1 + rightcoins1 + balloons[i]);
            }
            return maxcoins;
        }
};
